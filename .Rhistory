theme_map() +
theme(legend.position="bottom") +
theme(legend.key.width=unit(2, "cm"))  +
ggtitle("Wheat production in Mt for 2005")
# The CSV file "Country_NUE_assumption.csv" with NUE data for countries, is loaded
NUE_data <- read.csv("data/Country_NUE_assumption.csv")
# The CSV file "Country_NUE_assumption.csv" with NUE data for countries, is loaded
NUE_data <- read.csv("data/NUE_Zhang_et_al_2015/Country_NUE_assumption.csv")
# Create a data frame to store the results
results = data.frame(
Country = character(0),
N_Output_Mt = double(0),
N_Inputs_Mt = double(0),
N_Losses_Mt = double(0)
)
top10_order = country_production_df[order(country_production_df$Wheat_Production_Mt, decreasing = TRUE), ]
top10_order[1:10,]
country = top_10_countries[1]
top_10_countries <- top10_order$Country
country = top_10_countries[1]
# country = top_10_countries[1]
# Extract relevant data from NUE dataset
country_NUE <- NUE_data[NUE_data$Country == country, ]
country_NUE
country
# country = top_10_countries[1]
if(country == "United States of America") country = "USA"
# Extract relevant data from NUE dataset
country_NUE <- NUE_data[NUE_data$Country == country, ]
country_NUE
# Calculate N output from N output raster (nitrogen_output_raster)
N_Output_Mt <- cellStats(nitrogen_output_raster, stats = "sum", na.rm = TRUE)
# Extract relevant data from NUE dataset
country_NUE = NUE_data[NUE_data$Country == country, ]
# Calculate N output from N output raster (nitrogen_output_raster)
N_Output_Mt = cellStats(nitrogen_output_raster, stats = "sum", na.rm = TRUE)
# Calculate N output from N output raster (nitrogen_output_raster)
N_Output_Mt = cellStats(nitrogen_output_raster, stats = sum, na.rm = TRUE)
# Calculate N output from N output raster (nitrogen_output_raster)
N_Output_Mt = cellStats(nitrogen_output_raster, stat = "sum", na.rm = TRUE)
N_Output_Mt
index(top10_order)
row.names(top10_order)
row.names(top10_order[1:10]
)
row.names(top10_order[1:10,])
# Calculate N output aggregated per country from N output raster (nitrogen_output_raster)
# N_Output_Mt = cellStats(nitrogen_output_raster, stat = "sum", na.rm = TRUE)
country_aggregated_N_lst = lapply(as.numeric(row.names(top10_order[1:10,])), function(i) zonal(raster_lst[[i]], nitrogen_output_raster, "sum"))
plot(country_aggregated_N_lst[[1]])
country_aggregated_N = do.call(rbind, country_aggregated_N_lst)
country_aggregated_N
# Calculate N output aggregated per country from N output raster (nitrogen_output_raster)
# N_Output_Mt = cellStats(nitrogen_output_raster, stat = "sum", na.rm = TRUE)
country_aggregated_prod_lst = lapply(as.numeric(row.names(top10_order[1:10,])), function(i){
raster::extract(wheat_production_raster, # raster layer
sp_join_lst[[i]],  # spatial polygon for extraction
fun=sum,           # what to value to extract
df=TRUE)              # return a dataframe?
})
country_aggregated_prod = do.call(rbind, country_aggregated_prod_lst)
country_aggregated_prod
raster::extract(wheat_production_raster, # raster layer
sp_join_lst[[i]],  # spatial polygon for extraction
fun=sum,           # what to value to extract
df=TRUE,
na.rm = TRUE)              # return a dataframe?
# Calculate N output aggregated per country from N output raster (nitrogen_output_raster)
# N_Output_Mt = cellStats(nitrogen_output_raster, stat = "sum", na.rm = TRUE)
country_aggregated_prod_lst = lapply(as.numeric(row.names(top10_order[1:10,])), function(i){
raster::extract(wheat_production_raster, # raster layer
sp_join_lst[[i]],  # spatial polygon for extraction
fun=sum,           # what to value to extract
df=TRUE,
na.rm = TRUE)              # return a dataframe?
})
# Calculate N output aggregated per country from N output raster (nitrogen_output_raster)
# N_Output_Mt = cellStats(nitrogen_output_raster, stat = "sum", na.rm = TRUE)
country_aggregated_prod_lst = lapply(as.numeric(row.names(top10_order[1:10,])), function(i){
raster::extract(wheat_production_raster, # raster layer
sp_join_lst[[i]],  # spatial polygon for extraction
fun=sum,           # what to value to extract
df=TRUE,
na.rm = TRUE)              # return a dataframe?
})
country_aggregated_prod = do.call(rbind, country_aggregated_prod_lst)
(country_aggregated_prod = do.call(rbind, country_aggregated_prod_lst))
library(pbapply)
library(parallel)
library(doParallel)
ncores = detectCores() - 2
# ncores = 8
cluster <- makeCluster(ncores)
registerDoParallel(cluster, cores=ncores)
clusterEvalQ(cl = cluster, c(library(raster)))
clusterExport(cl = cluster, varlist = c("raster_lst", "wheat_production_raster"))
country_aggregated_production_lst = parLapply(cl = cluster, X=1:length(sp_join_lst), fun = function(i){
raster::extract(wheat_production_raster, # raster layer
sp_join_lst[[i]],  # spatial polygon for extraction
fun=sum,           # what to value to extract
df=TRUE,           # return a dataframe?
na.rm = TRUE)      # remove NAs?
})
stopCluster(cl=cluster)
gc()
# ncores = 8
cluster <- makeCluster(ncores)
registerDoParallel(cluster, cores=ncores)
clusterEvalQ(cl = cluster, c(library(raster)))
clusterExport(cl = cluster, varlist = c("sp_join_lst", "wheat_production_raster"))
country_aggregated_production_lst = parLapply(cl = cluster, X=1:length(sp_join_lst), fun = function(i){
raster::extract(wheat_production_raster, # raster layer
sp_join_lst[[i]],  # spatial polygon for extraction
fun=sum,           # what to value to extract
df=TRUE,           # return a dataframe?
na.rm = TRUE)      # remove NAs?
})
save(country_aggregated_production_lst, file = "./output/country_aggregated_production_lst.RData")
stopCluster(cl=cluster)
country_production_df = data.frame(do.call(what = rbind, args = country_aggregated_production_lst))
country_production_df$zone = gaul_lev0
colnames(country_production_df) <- c( "Country", "Wheat_Production_Mt")
top10_order = country_production_df[order(country_production_df$Wheat_Production_Mt, decreasing = TRUE), ]
top10_order[1:10,]
gaul_lev0
country_production_df = data.frame(do.call(what = rbind, args = country_aggregated_production_lst))
country_production_df$zone = gaul_lev0
View(country_production_df)
country_production_df = data.frame(do.call(what = rbind, args = country_aggregated_production_lst))
country_production_df$country = gaul_lev0
View(country_production_df)
country_production_df = data.frame(do.call(what = rbind, args = country_aggregated_production_lst))
country_production_df$ID = gaul_lev0
colnames(country_production_df) <- c( "Country", "Wheat_Production_Mt")
top10_order = country_production_df[order(country_production_df$Wheat_Production_Mt, decreasing = TRUE), ]
top10_order[1:10,]
write.csv(country_production_df, file = "output/country_production_wheat.csv")
row.names(top10_order)
row.names(top10_order[1:10]
)
row.names(top10_order[1:10,])
# compute N output for top 10 countries
country_aggregated_N_lst = lapply(as.numeric(row.names(top10_order[1:10,])), function(i){
raster::extract(nitrogen_output_raster, # raster layer
sp_join_lst[[i]],  # spatial polygon for extraction
fun=sum,           # what to value to extract
df=TRUE,           # return a dataframe?
na.rm = TRUE)      # remove NAs?
})
# Define the top 10 wheat-producing countries (adjust as needed)
top_10_countries <- top10_order$Country
country = top_10_countries[1]
# Extract relevant data from NUE dataset
country_NUE = NUE_data[NUE_data$Country == country_nue, ]
# country = top_10_countries[1]
if(country == "United States of America") {
country_nue = "USA"
} else country_nue = country
# Extract relevant data from NUE dataset
country_NUE = NUE_data[NUE_data$Country == country_nue, ]
row.names(top10_order)
row.names(top10_order[1:10,]
)
i = as.numeric(row.names(top10_order[1,]))
country = top10_order$Country[i]
i = as.numeric(row.names(top10_order[1,"Country"]))
country = top10_order$Country[i]
# i = 1
country = top10_order$Country[i]
i = 1
# i = 1
country = top10_order$Country[i]
# Extract relevant data from NUE dataset
country_NUE = NUE_data[NUE_data$Country == country_nue, ]
# Calculate N output from your N output top 10 countries
N_Output_Mt <- country_aggregated_N_lst[[i]]
# Calculate N output from your N output top 10 countries
N_Output_Mt <- country_aggregated_N_lst[[i]][2]
# Calculate N output from your N output top 10 countries
N_Output_Mt <- as.numeric(country_aggregated_N_lst[[i]][2]) # column index = 2
View(top10_order)
country_NUE$NUE
top10_order$Wheat_Production_Mt[i]
N_Inputs_Mt <- country_NUE$NUE * top10_order$Wheat_Production_Mt[i]
N_Inputs_Mt = country_NUE$NUE * top10_order$Wheat_Production_Mt[i]
# Calculate N losses (surplus)
N_Losses_Mt = N_Inputs_Mt - N_Output_Mt
# Create a data frame to store the results
results = data.frame(
Country = character(0),
NUE = double(0),
Production_Mt = double(0),
N_Output_Mt = double(0),
N_Inputs_Mt = double(0),
N_Losses_Mt = double(0)
)
# Loop through the top 10 countries
for (i in 1:10) {
# i = 1
country = top10_order$Country[i]
if(country == "United States of America") {
country_nue = "USA"
} else country_nue = country
# Calculate N output from your N output top 10 countries
N_Output_Mt <- as.numeric(country_aggregated_N_lst[[i]][2]) # column index = 2
# Extract relevant data from NUE dataset
country_NUE = NUE_data[NUE_data$Country == country_nue, ]
# Calculate N inputs from NUE dataset and
id = which(country)
N_Inputs_Mt = country_NUE$NUE * top10_order$Wheat_Production_Mt[i]
# Calculate N losses (surplus)
N_Losses_Mt = N_Inputs_Mt - N_Output_Mt
# Add the data to the results data frame
results <- rbind(results, data.frame(Country = country,
NUE = country_NUE,
Production_Mt = top10_order$Wheat_Production_Mt[i],
N_Output_Mt = N_Output_Mt, N_Inputs_Mt = N_Inputs_Mt, N_Losses_Mt = N_Losses_Mt))
}
# Loop through the top 10 countries
for (i in 1:10) {
# i = 1
country = top10_order$Country[i]
if(country == "United States of America") {
country_nue = "USA"
} else country_nue = country
# Calculate N output from your N output top 10 countries
N_Output_Mt <- as.numeric(country_aggregated_N_lst[[i]][2]) # column index = 2
# Extract relevant data from NUE dataset
country_NUE = NUE_data[NUE_data$Country == country_nue, ]
# Calculate N inputs from NUE dataset and
N_Inputs_Mt = country_NUE$NUE * top10_order$Wheat_Production_Mt[i]
# Calculate N losses (surplus)
N_Losses_Mt = N_Inputs_Mt - N_Output_Mt
# Add the data to the results data frame
results <- rbind(results, data.frame(Country = country,
NUE = country_NUE,
Production_Mt = top10_order$Wheat_Production_Mt[i],
N_Output_Mt = N_Output_Mt, N_Inputs_Mt = N_Inputs_Mt, N_Losses_Mt = N_Losses_Mt))
}
# Loop through the top 10 countries
for (i in 1:10) {
# i = 1
country = top10_order$Country[i]
if(country == "United States of America") {
country_nue = "USA"
}else if(country == "Russian Federation") {
country_nue = "RussianFed"
}else country_nue = country
# Calculate N output from your N output top 10 countries
N_Output_Mt <- as.numeric(country_aggregated_N_lst[[i]][2]) # column index = 2
# Extract relevant data from NUE dataset
country_NUE = NUE_data[NUE_data$Country == country_nue, ]
# Calculate N inputs from NUE dataset and
N_Inputs_Mt = country_NUE$NUE * top10_order$Wheat_Production_Mt[i]
# Calculate N losses (surplus)
N_Losses_Mt = N_Inputs_Mt - N_Output_Mt
# Add the data to the results data frame
results <- rbind(results, data.frame(Country = country,
NUE = country_NUE,
Production_Mt = top10_order$Wheat_Production_Mt[i],
N_Output_Mt = N_Output_Mt, N_Inputs_Mt = N_Inputs_Mt, N_Losses_Mt = N_Losses_Mt))
}
results
View(results)
top10_order
# Create a data frame to store the results
results = data.frame(
Country = character(0),
NUE = double(0),
Production_Mt = double(0),
N_Output_Mt = double(0),
N_Inputs_Mt = double(0),
N_Losses_Mt = double(0)
)
# Loop through the top 10 countries
for (i in 1:10) {
# i = 1
country = top10_order$Country[i]
if(country == "United States of America") {
country_nue = "USA"
}else if(country == "Russian Federation") {
country_nue = "RussianFed"
}else country_nue = country
# Calculate N output from your N output top 10 countries
N_Output_Mt <- as.numeric(country_aggregated_N_lst[[i]][2]) # column index = 2
# Extract relevant data from NUE dataset
country_NUE = NUE_data[NUE_data$Country == country_nue, ]
# Calculate N inputs from NUE dataset and
N_Inputs_Mt = country_NUE$NUE * top10_order$Wheat_Production_Mt[i]
# Calculate N losses (surplus)
N_Losses_Mt = N_Inputs_Mt - N_Output_Mt
# Add the data to the results data frame
results <- rbind(results, data.frame(Country = country,
NUE = country_NUE,
Production_Mt = top10_order$Wheat_Production_Mt[i],
N_Output_Mt = N_Output_Mt, N_Inputs_Mt = N_Inputs_Mt, N_Losses_Mt = N_Losses_Mt))
}
# Export the results to a CSV file
write.csv(results, "output/results.csv", row.names = FALSE)
save(country_aggregated_N_lst, file = "output/country_aggregated_N_lst.RData")
# Create a data frame for plotting
plot_data <- melt(results, id.vars = "Country")
# from the results data frame
# create a data frame for plotting
library(reshape2)
plot_data <- melt(results, id.vars = "Country")
plot_data <- melt(results[,5:7], id.vars = "Country") # N data in columns 5 to 7
plot_data <- melt(results[,c(1,5:7)], id.vars = "Country") # N data in columns 5 to 7
# Create the bar plots
p <- ggplot(plot_data, aes(x = Country, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "N Outputs and Losses for the Top 10 Wheat Producers",
y = "Million Tons (Mt)") +
scale_fill_manual(values = c("N_Output_Mt" = "green", "N_Losses_Mt" = "red")) +
theme_minimal()
p
# Export the plot as a PDF
ggsave("output/results_N_outputs_losses.pdf", plot = p, width = 10, height = 6)
library(gtsummary)
#| label: setup
#| include: false
compute_agg = FALSE
chunk_hook  <- knitr::knit_hooks$get("chunk")
knitr::knit_hooks$set(chunk = function(x, options) {
x <- chunk_hook(x, options)
paste0("\\linespread{0.5}\n", x, "\n\n\\linespread{2}")
})
library(gtsummary)
install.packages("gtsummary")
library(gtsummary)
tbl_summary(results) %>%
as_flex_table()
library(dplyr)
install.packages("dplyr")
library(gtsummary)
library(dplyr)
#| label: setup
#| include: false
compute_agg = FALSE
chunk_hook  <- knitr::knit_hooks$get("chunk")
knitr::knit_hooks$set(chunk = function(x, options) {
x <- chunk_hook(x, options)
paste0("\\linespread{0.5}\n", x, "\n\n\\linespread{2}")
})
library(gtsummary)
library(dplyr)
library(terra)
library(terra)
library(ggplot2)
```{r, echo=TRUE}
spam_data = list("yield" = rast("data/SPAM_2005_v3.2/SPAM2005V3r2_global_Y_TA_WHEA_A.tif"),
"harvested_area" = rast("data/SPAM_2005_v3.2/SPAM2005V3r2_global_H_TA_WHEA_A.tif"),
"physical_area" = rast("data/SPAM_2005_v3.2/SPAM2005V3r2_global_A_TA_WHEA_A.tif"))
wheat_production = spam_data[["yield"]] * spam_data[["harvested_area"]]
wheat_production_raster <- raster("output/wheat_production_Mt.tif")
df_prod = as(wheat_production_raster, "SpatialPixelsDataFrame")
colnames(df_prod)[1] = "Prod_Mt"
wheat_production_raster <- raster("output/wheat_production_Mt.tif")
library(raster)
wheat_production_raster <- raster("output/wheat_production_Mt.tif")
library(ggplot2)
library(ggplot2)
library(scales)
library(viridis)  # better colors for everyone
library(viridis)  # better colors for everyone
library(ggthemes) # theme_map()
df_prod = as.data.frame(df_prod)
library(sp)
df_prod = as(wheat_production_raster, "SpatialPixelsDataFrame")
df_prod = as.data.frame(df_prod)
colnames(df_prod)[1] = "Prod_Mt"
ggplot() +
geom_tile(data=df_prod, aes(x=x, y=y, fill=Prod_Mt), alpha=0.8) +
# geom_polygon(data=gaul_data_sp, aes(x=long, y=lat, group=group), fill=NA, color="grey50", size=0.25) +
scale_fill_viridis() +
coord_equal() +
theme_map() +
theme(legend.position="bottom") +
theme(legend.key.width=unit(2, "cm"))  +
ggtitle("Wheat production in Mt for 2005")
library(raster)
library(raster)
library(sf)
library(sf)
library(rgdal)
library(sf)
library(rgdal)
library(rgeos)
gaul_data_sf <- st_read("data/GAUL/g2015_2005_2.shp")
gaul_data_sf <- st_read("data/GAUL/g2015_2005_2.shp")
gaul_data_sp <- readOGR(dsn = "./data/GAUL", layer = "g2015_2005_2")
gaul_data_sf <- st_read("data/GAUL/g2015_2005_2.shp")
gaul_data_sp <- readOGR(dsn = "./data/GAUL", layer = "g2015_2005_2")
gaul_lev0 <- levels(factor(gaul_data_sp@data[,"ADM0_NAME"]))
ids <- lapply(gaul_lev0, function(x) which(gaul_data_sp@data[,"ADM0_NAME"] == x))
load("./output/sp_join_lst.RData")
load("./output/raster_lst.RData")
load("./output/country_aggregated_production_lst.RData")
country_production_df = data.frame(do.call(what = rbind, args = country_aggregated_production_lst))
country_production_df$ID = gaul_lev0
colnames(country_production_df) <- c( "Country", "Wheat_Production_Mt")
top10_order = country_production_df[order(country_production_df$Wheat_Production_Mt, decreasing = TRUE), ]
top10_order[1:10,]
library(raster)
wheat_production_raster = raster("output/wheat_production_Mt.tif")
nitrogen_output_raster = wheat_production_raster * 0.02
library(ggplot2)
library(scales)
library(scales)
library(viridis)  # better colors for everyone
library(ggthemes) # theme_map()
library(ggthemes) # theme_map()
df_n = as(nitrogen_output_raster, "SpatialPixelsDataFrame")
library(ggthemes) # theme_map()
df_n = as(nitrogen_output_raster, "SpatialPixelsDataFrame")
df_n = as.data.frame(df_n)
df_n = as(nitrogen_output_raster, "SpatialPixelsDataFrame")
df_n = as.data.frame(df_n)
colnames(df_n)[1] = "N_out"
ggplot() +
geom_tile(data=df_n, aes(x=x, y=y, fill=N_out), alpha=0.8) +
# geom_polygon(data=gaul_data_sp, aes(x=long, y=lat, group=group), fill=NA, color="grey50", size=0.25) +
scale_fill_viridis() +
coord_equal() +
theme_map() +
theme(legend.position="bottom") +
theme(legend.key.width=unit(2, "cm"))
# The CSV file "Country_NUE_assumption.csv" with NUE data for countries, is loaded
NUE_data = read.csv("data/NUE_Zhang_et_al_2015/Country_NUE_assumption.csv")
# Create a data frame to store the results
results = data.frame(
Country = character(0),
NUE = double(0),
Production_Mt = double(0),
N_Output_Mt = double(0),
N_Inputs_Mt = double(0),
N_Losses_Mt = double(0)
)
# Create a data frame to store the results
results = data.frame(
Country = character(0),
NUE = double(0),
Production_Mt = double(0),
N_Output_Mt = double(0),
N_Inputs_Mt = double(0),
N_Losses_Mt = double(0)
)
load("output/country_aggregated_N_lst.RData")
# Loop through the top 10 countries
for (i in 1:10) {
# i = 1
country = top10_order$Country[i]
if(country == "United States of America") {
country_nue = "USA"
}else if(country == "Russian Federation") {
country_nue = "RussianFed"
}else country_nue = country
# Calculate N output from your N output top 10 countries
N_Output_Mt <- as.numeric(country_aggregated_N_lst[[i]][2]) # column index = 2
# Extract relevant data from NUE dataset
country_NUE = NUE_data[NUE_data$Country == country_nue, ]
# Calculate N inputs from NUE dataset and
N_Inputs_Mt = country_NUE$NUE * top10_order$Wheat_Production_Mt[i]
# Calculate N losses (surplus)
N_Losses_Mt = N_Inputs_Mt - N_Output_Mt
# Add the data to the results data frame
results <- rbind(results, data.frame(Country = country,
NUE = country_NUE,
Production_Mt = top10_order$Wheat_Production_Mt[i],
N_Output_Mt = N_Output_Mt, N_Inputs_Mt = N_Inputs_Mt, N_Losses_Mt = N_Losses_Mt))
}
library(gtsummary)
library(dplyr)
tbl_summary(results) %>%
as_flex_table()
tbl_summary(results) %>%
as_gt()
tbl_summary(results) %>%
as_kable_extra()
knitr::kable(results)
results
results_print = results
results_print = results[,2:ncol(results)]
results_print[,2:ncol(results_print)] = round(results_print[,2:ncol(results_print)], digits = 1)
results_print
sessioninfo::session_info(to_file = "session_info.log", info = "all")
s_info = sessioninfo::session_info(to_file = "session_info.log", info = "all")
print(s_info)
#| label: setup
#| include: false
compute_agg = FALSE
chunk_hook  <- knitr::knit_hooks$get("chunk")
knitr::knit_hooks$set(chunk = function(x, options) {
x <- chunk_hook(x, options)
paste0("\\linespread{0.5}\n", x, "\n\n\\linespread{2}")
})
timing.ini <- Sys.time()
knitr:kable(results_print)
library(knitr)
knitr:kable(results_print)
knitr::kable(results_print)
row.names(results_print) = 1:10
results_print[,2:ncol(results_print)] = round(results_print[,2:ncol(results_print)], digits = 2)
library(knitr)
knitr::kable(results_print)
results_print
results_print = results[,2:ncol(results)]
row.names(results_print) = 1:10
results_print[,2:ncol(results_print)] = round(results_print[,2:ncol(results_print)], digits = 2)
library(knitr)
knitr::kable(results_print)
results_print
