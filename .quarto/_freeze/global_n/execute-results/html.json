{
  "hash": "aeea38b23bd8d017e73f2bc40e3a4fca",
  "result": {
    "markdown": "---\ntitle: \"ReSANGloW:\"\nsubtitle: \"A Reproducible Spatial Analysis for Charting Nitrogen Dynamics in Global Wheat Production\"\ndate: 2023-10-18\ndate-format: full\nauthor:\n  - Arturo Torres\ninstitute:\n  - \"LIST, ERIN\"\nformat: \n  beamer:\n    incremental: true \n    cite-method: natbib\n  html: default\nkeep-tex: true\naspectratio: 169\nfig-height: 5.3\t\nmonofont: 'Menlo'\nmonofontoptions: \n  - Scale=0.35\nbibliography: global_n.bib\n---\n\n\n\n\n\n## Goal\n\n-   Following the indications, the goal of this reproducible code is to (IIASA-BNR, 2023, assignment):\n\n    -   \"Combine various datasets to generate indictors of nitrogen loss to the environment associated with wheat production at various spatial scales\"\n\n    -   \"Provide graphical representations and conduct simple comparisons across a few countries\"\n\n    -   \"Provide a reproducible code associated to these tasks.\"\n\n\n## Task 1\n\n- Using SPAM raster data [@wood-sichra_spatial_2016], a new raster at the same resolution, containing wheat production volume (in million tons Mt) is produced. \n\n- Global scale in a raster format (5 arcminute spatial resolution) estimates of yield in Kg/Ha, physical area in Ha and harvested area in Ha for the year 2005 are available.\n\n\n\n\n\\linespread{0.5}\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\nterra 1.7.18\n```\n:::\n:::\n\n\\linespread{2}\n\n\n## Reading SPAM data\n\n\n\n\\linespread{0.5}\n::: {.cell}\n\n```{.r .cell-code}\nspam_data = list(\"yield\" = rast(\"data/SPAM_2005_v3.2/SPAM2005V3r2_global_Y_TA_WHEA_A.tif\"),\n                 \"harvested_area\" = rast(\"data/SPAM_2005_v3.2/SPAM2005V3r2_global_H_TA_WHEA_A.tif\"),\n                 \"physical_area\" = rast(\"data/SPAM_2005_v3.2/SPAM2005V3r2_global_A_TA_WHEA_A.tif\"))\n```\n:::\n\n\\linespread{2}\n\n\\linespread{0.5}\n::: {.cell}\n\n```{.r .cell-code}\nstr(spam_data)   \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 3\n $ yield         :S4 class 'SpatRaster' [package \"terra\"]\n $ harvested_area:S4 class 'SpatRaster' [package \"terra\"]\n $ physical_area :S4 class 'SpatRaster' [package \"terra\"]\n```\n:::\n\n```{.r .cell-code}\nspam_data[['yield']]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclass       : SpatRaster \ndimensions  : 1853, 4320, 1  (nrow, ncol, nlyr)\nresolution  : 0.08333333, 0.08333333  (x, y)\nextent      : -180, 180, -64.41667, 90  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat WGS 84 (EPSG:4326) \nsource      : SPAM2005V3r2_global_Y_TA_WHEA_A.tif \nname        : SPAM2005V3r2_global_Y_TA_WHEA_A \nmin value   :                               0 \nmax value   :                           19429 \n```\n:::\n:::\n\n\\linespread{2}\n\n\n\n\n## Calculate Wheat Production\n- Calculate wheat production by multiplying the raster layers for yield (in Kg/Ha) and harvested area (in Ha) using the * operator: \n\n  - wheat_production = spam_data[[\"yield\"]] * spam_data[[\"harvested_area\"]]\n\n- Convert Units: The resulting values are in Kg, so it is needed to convert them to million tons (Mt). Assuming 1 ton is equal to 1,000 Kg, it is possible to use the following:\n\n  - wheat_production_Mt = wheat_production / (1e3 * 1e6)\n\n## Calculate Wheat Production\n\n- A global map is created and the raster is exported in a geotif format:\n\n\n\n\\linespread{0.5}\n::: {.cell}\n\n```{.r .cell-code}\nwheat_production = spam_data[[\"yield\"]] * spam_data[[\"harvested_area\"]]\nwheat_production_Mt <- wheat_production / (1e9)\n```\n:::\n\n\\linespread{2}\n\n\\linespread{0.5}\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(raster)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: sp\n```\n:::\n\n```{.r .cell-code}\nwriteRaster(wheat_production_Mt, filename = \"./output/wheat_production_Mt.tif\", \n            overwrite=TRUE, gdal = c(\"COMPRESS=DEFLATE\", \"TFW=YES\"))\n```\n:::\n\n\\linespread{2}\n\n\n\n## Wheat Production in Mt in 2005\n\n\n\\linespread{0.5}\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'scales'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:terra':\n\n    rescale\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: viridisLite\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'viridis'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:scales':\n\n    viridis_pal\n```\n:::\n\n::: {.cell-output-display}\n![](global_n_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\\linespread{2}\n\n\n\n## Task 2\n\n- Using the newly created raster and the GAUL shapefile of administrative borders, the  production is aggregated to country level and exported to a csv file.\n\n\n\n\\linespread{0.5}\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(raster)\nlibrary(sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n```\n:::\n\n```{.r .cell-code}\nlibrary(rgdal)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nPlease note that rgdal will be retired during 2023,\nplan transition to sf/stars/terra functions using GDAL and PROJ\nat your earliest convenience.\nSee https://r-spatial.org/r/2022/04/12/evolution.html and https://github.com/r-spatial/evolution\nrgdal: version: 1.6-5, (SVN revision 1199)\nGeospatial Data Abstraction Library extensions to R successfully loaded\nLoaded GDAL runtime: GDAL 3.5.3, released 2022/10/21\nPath to GDAL shared files: /Users/torres/Library/R/arm64/4.2/library/sf/gdal\n GDAL does not use iconv for recoding strings.\nGDAL binary built with GEOS: TRUE \nLoaded PROJ runtime: Rel. 9.1.0, September 1st, 2022, [PJ_VERSION: 910]\nPath to PROJ shared files: /Users/torres/Library/R/arm64/4.2/library/rgdal/proj\nPROJ CDN enabled: FALSE\nLinking to sp version:1.6-0\nTo mute warnings of possible GDAL/OSR exportToProj4() degradation,\nuse options(\"rgdal_show_exportToProj4_warnings\"=\"none\") before loading sp or rgdal.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'rgdal'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:terra':\n\n    project\n```\n:::\n\n```{.r .cell-code}\nlibrary(rgeos)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nrgeos version: 0.6-2, (SVN revision 693)\n GEOS runtime version: 3.11.0-CAPI-1.17.0 \n Please note that rgeos will be retired during 2023,\nplan transition to sf functions using GEOS at your earliest convenience.\n GEOS using OverlayNG\n Linking to sp version: 1.6-0 \n Polygon checking: TRUE \n```\n:::\n\n```{.r .cell-code}\ngaul_data_sf <- st_read(\"data/GAUL/g2015_2005_2.shp\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `g2015_2005_2' from data source \n  `/Users/torres/Documents/02_working/3-Production/05_models/32_iiasa/global_n/data/GAUL/g2015_2005_2.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 38189 features and 12 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -180 ymin: -89.9 xmax: 180 ymax: 83.62742\nGeodetic CRS:  WGS 84\n```\n:::\n\n```{.r .cell-code}\ngaul_data_sp <- readOGR(dsn = \"./data/GAUL\", layer = \"g2015_2005_2\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: OGR support is provided by the sf and terra packages among others\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: OGR support is provided by the sf and terra packages among others\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: OGR support is provided by the sf and terra packages among others\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: OGR support is provided by the sf and terra packages among others\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: OGR support is provided by the sf and terra packages among others\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: OGR support is provided by the sf and terra packages among others\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nOGR data source with driver: ESRI Shapefile \nSource: \"/Users/torres/Documents/02_working/3-Production/05_models/32_iiasa/global_n/data/GAUL\", layer: \"g2015_2005_2\"\nwith 38189 features\nIt has 12 fields\n```\n:::\n\n```{.r .cell-code}\ngaul_lev0 <- levels(factor(gaul_data_sp@data[,\"ADM0_NAME\"]))\n\nids <- lapply(gaul_lev0, function(x) which(gaul_data_sp@data[,\"ADM0_NAME\"] == x))\n\n# sp_join <- as(gaul_data_sp, \"SpatialPolygons\")\n```\n:::\n\n\\linespread{2}\n\n\\linespread{0.5}\n::: {.cell}\n\n```{.r .cell-code}\n# ```{r parallel-join, echo=TRUE, eval=compute_agg}\n## Parallel computation\nlibrary(pbapply)\nlibrary(parallel)\nlibrary(doParallel)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: foreach\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: iterators\n```\n:::\n\n```{.r .cell-code}\nncores = detectCores() - 2\n# ncores = 8\ncluster <- makeCluster(ncores)\nregisterDoParallel(cluster, cores=ncores)\n\nclusterEvalQ(cl = cluster, c(library(rgeos, raster)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"rgeos\"     \"sp\"        \"stats\"     \"graphics\"  \"grDevices\" \"utils\"    \n[7] \"datasets\"  \"methods\"   \"base\"     \n\n[[2]]\n[1] \"rgeos\"     \"sp\"        \"stats\"     \"graphics\"  \"grDevices\" \"utils\"    \n[7] \"datasets\"  \"methods\"   \"base\"     \n\n[[3]]\n[1] \"rgeos\"     \"sp\"        \"stats\"     \"graphics\"  \"grDevices\" \"utils\"    \n[7] \"datasets\"  \"methods\"   \"base\"     \n\n[[4]]\n[1] \"rgeos\"     \"sp\"        \"stats\"     \"graphics\"  \"grDevices\" \"utils\"    \n[7] \"datasets\"  \"methods\"   \"base\"     \n\n[[5]]\n[1] \"rgeos\"     \"sp\"        \"stats\"     \"graphics\"  \"grDevices\" \"utils\"    \n[7] \"datasets\"  \"methods\"   \"base\"     \n\n[[6]]\n[1] \"rgeos\"     \"sp\"        \"stats\"     \"graphics\"  \"grDevices\" \"utils\"    \n[7] \"datasets\"  \"methods\"   \"base\"     \n\n[[7]]\n[1] \"rgeos\"     \"sp\"        \"stats\"     \"graphics\"  \"grDevices\" \"utils\"    \n[7] \"datasets\"  \"methods\"   \"base\"     \n\n[[8]]\n[1] \"rgeos\"     \"sp\"        \"stats\"     \"graphics\"  \"grDevices\" \"utils\"    \n[7] \"datasets\"  \"methods\"   \"base\"     \n```\n:::\n\n```{.r .cell-code}\nclusterExport(cl = cluster, varlist = c(\"ids\", \"gaul_data_sp\"))\n\nsp_join_lst <- parLapply(cl = cluster, X = 1:length(ids), fun = function(i) {\n  print(paste0(i, \"/\", length(ids)))\n  gUnionCascaded(gaul_data_sp[ids[[i]],])\n})\n\nstopCluster(cl=cluster)\n\nsave(sp_join_lst, file = \"./data/sp_join_lst.RData\")\n```\n:::\n\n\\linespread{2}\n\n\\linespread{0.5}\n::: {.cell}\n\n```{.r .cell-code}\nload(\"./data/sp_join_lst.RData\")\n\n#plot(sp_join)\n# spplot(sp_join_lst[[1]], col = \"red\", main = gaul_lev0[1]) # Afganistan\nspplot(sp_join_lst[[57]], col = \"red\", main = gaul_lev0[57]) # Colombia\n```\n\n::: {.cell-output-display}\n![](global_n_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n\n```{.r .cell-code}\nspplot(sp_join_lst[[148]], col = \"red\", main = gaul_lev0[148]) # Luxemburgo\n```\n\n::: {.cell-output-display}\n![](global_n_files/figure-html/unnamed-chunk-8-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# spplot(sp_join_lst[[10]], col = \"red\", main = gaul_lev0[10]) # Antigua y Barbuda\n```\n:::\n\n\\linespread{2}\n\n\\linespread{0.5}\n::: {.cell}\n\n```{.r .cell-code}\n# this chunk is not required (eval = TRUE only if a raster splitted per country is needed)\n\nstr(sp_join_lst[[1]])\n\nif(compute_agg == TRUE){\n  library(pbapply)\n  library(parallel)\n  library(doParallel)\n  \n  ncores = detectCores() - 2\n  # ncores = 8\n  cluster <- makeCluster(ncores)\n  registerDoParallel(cluster, cores=ncores)\n  \n  clusterEvalQ(cl = cluster, c(library(rgeos, raster)))\n  clusterExport(cl = cluster, varlist = c(\"sp_join_lst\", \"wheat_production_raster\", \"rasterize\"))\n\nraster_lst <- parLapply(cl = cluster, X = 1:length(sp_join_lst), fun = function(i) {\n  print(paste0(i, \"/\", length(sp_join_lst)))\n  rasterize(sp_join_lst[[i]], wheat_production_raster)\n  })\n\nstopCluster(cl=cluster)\n\nsave(raster_lst, file = \"./output/raster_lst.RData\")\n  \n}\n```\n:::\n\n\\linespread{2}\n\n\\linespread{0.5}\n::: {.cell}\n\n```{.r .cell-code}\n# this chunk is not required (eval = TRUE only if a raster splitted per country is needed)\n\nload(\"./output/raster_lst.RData\")\n\nplot(raster_lst[[260]]) #USA\n```\n:::\n\n\\linespread{2}\n\n\\linespread{0.5}\n::: {.cell}\n\n```{.r .cell-code}\nif(compute_agg == TRUE){\n  library(pbapply)\n  library(parallel)\n  library(doParallel)\n  \n  ncores = detectCores() - 2\n  # ncores = 8\n  cluster <- makeCluster(ncores)\n  registerDoParallel(cluster, cores=ncores)\n  \n  clusterEvalQ(cl = cluster, c(library(raster)))\n  clusterExport(cl = cluster, varlist = c(\"sp_join_lst\", \"wheat_production_raster\"))\n  \n  country_aggregated_production_lst = parLapply(cl = cluster, X=1:length(sp_join_lst), fun = function(i){\n     raster::extract(wheat_production_raster, # raster layer\n\t   sp_join_lst[[i]],  # spatial polygon for extraction\n\t   fun=sum,           # what to value to extract\n\t   df=TRUE,           # return a dataframe?\n\t   na.rm = TRUE)      # remove NAs?               \n   })\n  \n  stopCluster(cl=cluster)\n  \n   save(country_aggregated_production_lst, file = \"./output/country_aggregated_production_lst.RData\")\n  \n   stopCluster(cl=cluster)\n}\n```\n:::\n\n\\linespread{2}\n\n\n## Create a Data Frame and Rename Columns\n\n- Rename the columns to indicate the country name and the aggregated wheat production in million tons.\n\n- The country_production_df contains a data frame with each country's name and its aggregated wheat production in million tons. This data frame can be used for further analysis or visualization, and export to a csv file.\n\n## Wheat Production: Top 10 Most Productive Countries in 2005\n\n\n\n\\linespread{0.5}\n::: {.cell}\n\n```{.r .cell-code}\nload(\"./output/country_aggregated_production_lst.RData\")\n\ncountry_production_df = data.frame(do.call(what = rbind, args = country_aggregated_production_lst)) \n\ncountry_production_df$ID = gaul_lev0\n```\n:::\n\n\\linespread{2}\n\n\\linespread{0.5}\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(country_production_df) <- c( \"Country\", \"Wheat_Production_Mt\")\n\ntop10_order = country_production_df[order(country_production_df$Wheat_Production_Mt, decreasing = TRUE), ]\n\ntop10_order[1:10,]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                     Country Wheat_Production_Mt\n52                     China            99.26530\n117                    India            69.55773\n260 United States of America            55.12679\n206       Russian Federation            46.02241\n85                    France            37.27257\n46                    Canada            25.26367\n93                   Germany            23.81824\n189                 Pakistan            20.89733\n251                   Turkey            20.83224\n16                 Australia            19.30162\n```\n:::\n\n```{.r .cell-code}\nwrite.csv(country_production_df, file = \"output/country_production_wheat.csv\")\n```\n:::\n\n\\linespread{2}\n\n\n\n## Task 3\n- To create a raster map of the nitrogen (N) output in harvested wheat yield, assuming that 2% of the harvested wheat yield consists of the N element, it is used again the \"raster\" package. Here are the steps to achieve this:\n\n  - Read the \"wheat_production\" raster created earlier in Task 1. \n\n  - Calculate Nitrogen Output Raster: A new raster that represents the nitrogen (N) output in harvested wheat yield is created. Assuming 2% of the harvested yield is N, the following formula is used:\n\n    - nitrogen_output_raster = wheat_production_raster * 0.02\n\n  - Plot the Nitrogen Output Raster: Visualize the \"nitrogen_output_raster\" using the plot function from the \"raster\" package.\n\n  - Export the Nitrogen Output Raster:\nTo export the raster map of nitrogen output, the writeRaster function is used and saved in GeoTiff format.\n\n\n\n\\linespread{0.5}\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(raster)\n\nwheat_production_raster = raster(\"output/wheat_production_Mt.tif\")\n\nnitrogen_output_raster = wheat_production_raster * 0.02\n```\n:::\n\n\\linespread{2}\n\n\n\n## Global Nitrogen Output\n- A raster map that represents the nitrogen (N) output in the harvested wheat yield has been created, based on the assumption that 2% of the yield consists of the N element. This map will show the distribution of nitrogen output in million tons (Mt) across the Globe. \n\n## Global Nitrogen Output in Harvested Wheat Yield in Mt in 2005\n::: columns\n::: {.column width=\"95%\"}\n\n\n\n\\linespread{0.5}\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(scales)\nlibrary(viridis)  # better colors for everyone\nlibrary(ggthemes) # theme_map()\n\ndf_n = as(nitrogen_output_raster, \"SpatialPixelsDataFrame\")\ndf_n = as.data.frame(df_n) \ncolnames(df_n)[1] = \"N_out\"\n\nggplot() +  \n  geom_tile(data=df_n, aes(x=x, y=y, fill=N_out), alpha=0.8) + \n  # geom_polygon(data=gaul_data_sp, aes(x=long, y=lat, group=group), fill=NA, color=\"grey50\", size=0.25) +\n  scale_fill_viridis() +\n  coord_equal() +\n  theme_map() +\n  theme(legend.position=\"bottom\") +\n  theme(legend.key.width=unit(2, \"cm\"))  \n```\n\n::: {.cell-output-display}\n![](global_n_files/figure-html/nitrogen-output-plot-1.png){width=672}\n:::\n\n```{.r .cell-code}\n  # ggtitle(\"Nitrogen Output in Harvested Wheat Yield in Mt for 2005\") \n```\n:::\n\n\\linespread{2}\n\n\n:::\n:::\n\n\n\n\\linespread{0.5}\n::: {.cell}\n\n```{.r .cell-code}\nraster::writeRaster(nitrogen_output_raster, filename = \"output/nitrogen_output.tif\", format = \"GTiff\", overwrite = TRUE)\n```\n:::\n\n\\linespread{2}\n\n\n\n## Task 4\n\n- Using the dataset of country-level nitrogen use efficiency (NUE) of wheat from [@zhang_managing_2015], and steps from previous tasks:\n\n  - a. For the 10 biggest wheat producers the country-level values of N output in harvested wheat, as well as related total N inputs and N losses (i.e., surplus) is estimated, and exported the dataset as a csv file\n  \n  - b. The N outputs and losses for these 10 countries are summarized in one figure (plot exported as pdf file)\n\n## a. Estimated and Exported Dataset for the Top 10 Countries by N Outputs and Losses\n\n\n\n\\linespread{0.5}\n::: {.cell}\n\n```{.r .cell-code}\n# The CSV file \"Country_NUE_assumption.csv\" with NUE data for countries, is loaded\nNUE_data = read.csv(\"data/NUE_Zhang_et_al_2015/Country_NUE_assumption.csv\")\n\n# Create a data frame to store the results\nresults = data.frame(\n  Country = character(0),\n  NUE = double(0),\n  Production_Mt = double(0), \n  N_Output_Mt = double(0),\n  N_Inputs_Mt = double(0),\n  N_Losses_Mt = double(0)\n)\n```\n:::\n\n\\linespread{2}\n\n\\linespread{0.5}\n::: {.cell}\n\n```{.r .cell-code}\n# compute N output for top 10 countries\ncountry_aggregated_N_lst = lapply(as.numeric(row.names(top10_order[1:10,])), function(i){\n     raster::extract(nitrogen_output_raster, # raster layer\n\t   sp_join_lst[[i]],  # spatial polygon for extraction\n\t   fun=sum,           # what to value to extract\n\t   df=TRUE,           # return a dataframe?\n\t   na.rm = TRUE)      # remove NAs?               \n   })\n\nsave(country_aggregated_N_lst, file = \"output/country_aggregated_N_lst.RData\")\n```\n:::\n\n\\linespread{2}\n\n\\linespread{0.5}\n::: {.cell}\n\n```{.r .cell-code}\nload(\"output/country_aggregated_N_lst.RData\")\n\n# Loop through the top 10 countries\nfor (i in 1:10) {\n  # i = 1\n  country = top10_order$Country[i]\n  if(country == \"United States of America\") {\n    country_nue = \"USA\"\n  }else if(country == \"Russian Federation\") {\n    country_nue = \"RussianFed\"\n  }else country_nue = country\n  \n  # Calculate N output from your N output top 10 countries\n  N_Output_Mt <- as.numeric(country_aggregated_N_lst[[i]][2]) # column index = 2\n  \n  # Extract relevant data from NUE dataset\n  country_NUE = NUE_data[NUE_data$Country == country_nue, ]\n\n  # Calculate N inputs from NUE dataset and \n  N_Inputs_Mt = country_NUE$NUE * top10_order$Wheat_Production_Mt[i]\n  \n  # Calculate N losses (surplus)\n  N_Losses_Mt = N_Inputs_Mt - N_Output_Mt\n  \n  # Add the data to the results data frame\n  results <- rbind(results, data.frame(Country = country, \n                                       NUE = country_NUE,\n                                       Production_Mt = top10_order$Wheat_Production_Mt[i],\n                                       N_Output_Mt = N_Output_Mt, N_Inputs_Mt = N_Inputs_Mt, N_Losses_Mt = N_Losses_Mt))\n}\n\nresults_print = results[,2:ncol(results)]\nrow.names(results_print) = 1:10\n\nresults_print[,2:ncol(results_print)] = round(results_print[,2:ncol(results_print)], digits = 2)\n\n# library(knitr)\n# knitr::kable(results_print)\nprint(results_print)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   NUE.Country NUE.NUE Production_Mt N_Output_Mt N_Inputs_Mt N_Losses_Mt\n1        China    0.26         99.27        1.99       26.04       24.06\n2        India    0.25         69.56        1.39       17.38       15.99\n3          USA    0.51         55.13        1.10       28.00       26.90\n4   RussianFed    0.62         46.02        0.92       28.48       27.56\n5       France    0.74         37.27        0.75       27.65       26.91\n6       Canada    0.50         25.26        0.51       12.72       12.21\n7      Germany    0.46         23.82        0.48       10.92       10.45\n8     Pakistan    0.20         20.90        0.42        4.18        3.76\n9       Turkey    0.42         20.83        0.42        8.80        8.39\n10   Australia    0.54         19.30        0.39       10.44       10.05\n```\n:::\n\n```{.r .cell-code}\n# Export the results to a CSV file\nwrite.csv(results, \"output/results.csv\", row.names = FALSE)\n```\n:::\n\n\\linespread{2}\n\n\n\n## b. Visualization of the N Outputs and Losses\n\n\n\n\\linespread{0.5}\n::: {.cell}\n\n```{.r .cell-code}\n# from the results data frame\n# create a data frame for plotting (N Outputs and Losses)\nlibrary(reshape2)\nplot_data <- melt(results[,c(2,5,7)], id.vars = \"NUE.Country\") # N data in columns 1, 5 and 7\n\n# Create the bar plots\np <- ggplot(plot_data, aes(x = NUE.Country, y = value, fill = variable)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"N Outputs and Losses for the Top 10 Wheat Global Producers\",\n       y = \"Million Tons (Mt)\") +\n  scale_fill_manual(values = c(\"N_Output_Mt\" = \"green4\", \"N_Losses_Mt\" = \"red3\")) +\n  theme_minimal()\n\np\n```\n\n::: {.cell-output-display}\n![](global_n_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Export the plot as a PDF\nggsave(\"output/results_N_outputs_losses.pdf\", plot = p, width = 13, height = 8)\n```\n:::\n\n\\linespread{2}\n\n\n\n## c. Main Patterns of N Lossess across Countries\n- The main patterns of N losses across countries, in relation to production volume and NUE (including any singular feature) are explained in the following paragraph:\n\n  - In the analysis of the top 10 wheat-producing countries, varying patterns of nitrogen losses is observed. Some countries with high wheat production volumes and relatively low NUE, such as China, showed significant nitrogen losses, suggesting inefficiencies in nitrogen utilization. In contrast, countries with relative higher NUE, like Australia, exhibited lower losses despite high production. Additionally, a few countries, like France, displayed unexpected patterns of high losses compared to their NUE, potentially indicating other factors influencing nitrogen loss, such as agricultural practices or environmental conditions.  \n\n## Task 5\nIn the following paragraph is explained how an analysis like the one performed in previous tasks could translate to the models within BNR's modeling suite (https://iiasa.github.io/iBIOM/en/main/), including potential limitations.\n\n- An analysis of nitrogen output, inputs, and losses in wheat production can inform IIASA BNR's modeling suite by providing critical data inputs for assessing the environmental impacts of agricultural practices. These data help in calibrating and validating models related to land use, nutrient management, and climate change mitigation, enhancing the suite's accuracy in predicting the effects of different agricultural scenarios on nitrogen cycling and environmental sustainability. Limitations, however, may arise from the simplifications made e.g. in assuming a fixed 2% nitrogen content in harvested yield, as actual values can vary. Additionally, model outcomes depend on the quality and comprehensiveness of input data, which can pose challenges in areas with limited data availability.\n\n## Task 6\n\n### Issues\n\n- In the Task 2, an implementation of the country-level aggregation step for computing the Global wheat production per country in parallel was needed due to the high computational burden reached and avoid RAM issues. Therefore, parallel pre-computed RData objects were created to be loaded in this step to render this reproducible presentation in a reasonable short time (less than three minutes), i.e.\n\n  - “./output/sp_join_lst.RData”\n\n  - “./output/raster_lst.RData”\n\n  - \"./output/country_aggregated_production_lst.RData\"\n\n- Similarly in Task 3 the actual computation of the Global country production was coded in parallel and saved as an RData object to be loaded subsequently, i.e.\n \n  - “./output/country_aggregated_N_lst.RData”\n\n## Task 6\n\n### Assumptions\n- The computations were done by using the Geodetic CRS:  WGS 84.\n\n- The three input maps from the SPAM model for the year 2005 are global scale in raster format (5 arcminute spatial resolution):\n  - Estimates of yield in Kg/Ha, \n  - Physical area in Ha, \n  - Harvested area in Ha.\n\n- 1 ton is equal to 1,000 Kg, so 1 million ton is equal to 1,000,000,000 Kg, i.e. 1 million ton = 1e9 Kg.\n\n## References\n\n::: {#refs}\n:::\n\n## Session Info\n\n\n\\linespread{0.5}\n::: {.cell}\n\n```{.r .cell-code}\ntiming.end <- Sys.time()\nprint(timing.elapsed <- timing.end - timing.ini)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 3.145242 mins\n```\n:::\n:::\n\n\\linespread{2}\n\n\\linespread{0.5}\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sessioninfo)\ns_info = sessioninfo::session_info(to_file = \"session_info.log\", info = \"all\")\n\nprint(s_info)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.0 (2022-04-22)\n os       macOS 13.4.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Luxembourg\n date     2023-10-18\n pandoc   3.1.8 @ /opt/homebrew/bin/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n class         7.3-21  2023-01-23 [2] CRAN (R 4.2.0)\n classInt      0.4-9   2023-02-28 [1] CRAN (R 4.2.0)\n cli           3.6.0   2023-01-09 [1] CRAN (R 4.2.0)\n codetools     0.2-19  2023-02-01 [2] CRAN (R 4.2.0)\n colorspace    2.1-0   2023-01-23 [1] CRAN (R 4.2.0)\n DBI           1.1.3   2022-06-18 [1] CRAN (R 4.2.0)\n digest        0.6.31  2022-12-11 [1] CRAN (R 4.2.0)\n doParallel  * 1.0.17  2022-02-07 [1] CRAN (R 4.2.0)\n dplyr         1.1.3   2023-09-03 [1] CRAN (R 4.2.0)\n e1071         1.7-13  2023-02-01 [1] CRAN (R 4.2.0)\n evaluate      0.20    2023-01-17 [1] CRAN (R 4.2.0)\n fansi         1.0.4   2023-01-22 [1] CRAN (R 4.2.0)\n farver        2.1.1   2022-07-06 [1] CRAN (R 4.2.0)\n fastmap       1.1.1   2023-02-24 [1] CRAN (R 4.2.0)\n foreach     * 1.5.2   2022-02-02 [1] CRAN (R 4.2.0)\n generics      0.1.3   2022-07-05 [1] CRAN (R 4.2.0)\n ggplot2     * 3.4.1   2023-02-10 [1] CRAN (R 4.2.0)\n ggthemes    * 4.2.4   2021-01-20 [1] CRAN (R 4.2.0)\n glue          1.6.2   2022-02-24 [1] CRAN (R 4.2.0)\n gridExtra     2.3     2017-09-09 [1] CRAN (R 4.2.0)\n gtable        0.3.1   2022-09-01 [1] CRAN (R 4.2.0)\n htmltools     0.5.4   2022-12-07 [1] CRAN (R 4.2.0)\n htmlwidgets   1.6.1   2023-01-07 [1] CRAN (R 4.2.0)\n iterators   * 1.0.14  2022-02-05 [1] CRAN (R 4.2.0)\n jsonlite      1.8.4   2022-12-06 [1] CRAN (R 4.2.0)\n KernSmooth    2.23-20 2021-05-03 [2] CRAN (R 4.2.0)\n knitr         1.42    2023-01-25 [1] CRAN (R 4.2.0)\n labeling      0.4.2   2020-10-20 [1] CRAN (R 4.2.0)\n lattice       0.20-45 2021-09-22 [2] CRAN (R 4.2.0)\n lifecycle     1.0.3   2022-10-07 [1] CRAN (R 4.2.0)\n magrittr      2.0.3   2022-03-30 [1] CRAN (R 4.2.0)\n munsell       0.5.0   2018-06-12 [1] CRAN (R 4.2.0)\n pbapply     * 1.7-0   2023-01-13 [1] CRAN (R 4.2.0)\n pillar        1.9.0   2023-03-22 [1] CRAN (R 4.2.0)\n pkgconfig     2.0.3   2019-09-22 [1] CRAN (R 4.2.0)\n plyr          1.8.8   2022-11-11 [1] CRAN (R 4.2.0)\n proxy         0.4-27  2022-06-09 [1] CRAN (R 4.2.0)\n purrr         1.0.1   2023-01-10 [1] CRAN (R 4.2.0)\n R6            2.5.1   2021-08-19 [1] CRAN (R 4.2.0)\n ragg          1.2.5   2023-01-12 [1] CRAN (R 4.2.0)\n raster      * 3.6-20  2023-03-06 [1] CRAN (R 4.2.0)\n Rcpp          1.0.10  2023-01-22 [1] CRAN (R 4.2.0)\n reshape2    * 1.4.4   2020-04-09 [1] CRAN (R 4.2.0)\n rgdal       * 1.6-5   2023-03-02 [1] CRAN (R 4.2.0)\n rgeos       * 0.6-2   2023-03-02 [1] CRAN (R 4.2.0)\n rlang         1.1.1   2023-04-28 [1] CRAN (R 4.2.0)\n rmarkdown     2.20    2023-01-19 [1] CRAN (R 4.2.0)\n rstudioapi    0.14    2022-08-22 [1] CRAN (R 4.2.0)\n scales      * 1.2.1   2022-08-20 [1] CRAN (R 4.2.0)\n sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.2.0)\n sf          * 1.0-9   2022-11-08 [1] CRAN (R 4.2.0)\n sp          * 1.6-0   2023-01-19 [1] CRAN (R 4.2.0)\n stringi       1.7.12  2023-01-11 [1] CRAN (R 4.2.0)\n stringr       1.5.0   2022-12-02 [1] CRAN (R 4.2.0)\n systemfonts   1.0.4   2022-02-11 [1] CRAN (R 4.2.0)\n terra       * 1.7-18  2023-03-06 [1] CRAN (R 4.2.0)\n textshaping   0.3.6   2021-10-13 [1] CRAN (R 4.2.0)\n tibble        3.2.1   2023-03-20 [1] CRAN (R 4.2.0)\n tidyselect    1.2.0   2022-10-10 [1] CRAN (R 4.2.0)\n units         0.8-1   2022-12-10 [1] CRAN (R 4.2.0)\n utf8          1.2.3   2023-01-31 [1] CRAN (R 4.2.0)\n vctrs         0.6.4   2023-10-12 [1] CRAN (R 4.2.0)\n viridis     * 0.6.2   2021-10-13 [1] CRAN (R 4.2.0)\n viridisLite * 0.4.1   2022-08-22 [1] CRAN (R 4.2.0)\n withr         2.5.0   2022-03-03 [1] CRAN (R 4.2.0)\n xfun          0.37    2023-01-31 [1] CRAN (R 4.2.0)\n yaml          2.3.7   2023-01-23 [1] CRAN (R 4.2.0)\n\n [1] /Users/torres/Library/R/arm64/4.2/library\n [2] /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library\n\n─ External software ──────────────────────────────────────────────────────────\n setting        value\n cairo          1.16.0\n cairoFT        2.11.1/2.13.94\n pango\n png            1.6.37\n jpeg           9.4\n tiff           LIBTIFF, Version 4.3.0\n tcl            8.6.12\n curl           7.88.1\n zlib           1.2.11\n bzlib          1.0.8, 13-Jul-2019\n xz             5.2.5\n PCRE           10.39 2021-10-29\n ICU            70.2\n TRE            TRE 0.8.0 R_fixes (BSD)\n iconv          GNU libiconv 1.11\n readline       5.2\n BLAS           /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRblas.0.dylib\n lapack         /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRlapack.dylib\n lapack_version 3.10.0\n\n─ Python configuration ───────────────────────────────────────────────────────\n Python is not available\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n\\linespread{2}",
    "supporting": [
      "global_n_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}